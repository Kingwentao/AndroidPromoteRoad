// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.4.32'
    repositories {
        google()
        jcenter()
        
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.61"
        classpath 'com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.10'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        
    }
}

task clean(type: Delete) {
    //直接写入task里面的代码，属于配置阶段，所以配置阶段就会执行，即无论是否执行clean的task都会执行
    println '假配置1'
    delete rootProject.buildDir
    println '假配置2'

    //doLast真正执行该task的时候才会进入，在doFirst后执行
    doLast {
        println '执行clean后'
    }
    //doFirst真正执行该task的时候才会进入，会插入到doLast前执行
    doFirst {
        println '执行clean前'
    }
}

task bumpVersion(){
    doLast{
        def versionPropsFile = file('version.properties')
        def versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def codeBumped = versionProps['VERSION_CODE'].toInteger() + 1
        versionProps['VERSION_CODE'] = codeBumped.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
        println '升级版本号到 ' + codeBumped
    }
}

//dependsOn 依赖其任务，并先执行依赖task
task bumpVersionAndNotify(dependsOn: bumpVersion){
    doLast{
        println '升级后的通知完成'
    }
}

afterEvaluate {
    //插入第二（定义）、三（执行）阶段中要的代码，比如文件、网络相关操作
}
